var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"PID_mat","ref":false,"files":[{"name":"PID_mat.c","type":"source","group":"model","path":"E:\\competition\\2024_ROBOMASTER\\A_JINZ\\framework\\system_detect\\PID_mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: PID_mat.c\r\n *\r\n * Code generated for Simulink model :PID_mat.\r\n *\r\n * Model version      : 1.1\r\n * Simulink Coder version    : 23.2 (R2023b) 01-Aug-2023\r\n * TLC version       : 23.2 (Nov 08 2023)\r\n * C/C++ source code generated on  : Wed Nov  8 15:52:54 2023\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#include \"PID_mat.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Block states (default storage) */\r\nDW_PID_mat PID_mat_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_PID_mat PID_mat_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_PID_mat PID_mat_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_PID_mat PID_mat_M_;\r\nRT_MODEL_PID_mat *const PID_mat_M = &PID_mat_M_;\r\n\r\n/* Model step function */\r\nvoid PID_mat_step(void)\r\n{\r\n  real_T rtb_IProdOut;\r\n  real_T rtb_Sum;\r\n  real_T tmp;\r\n  int8_T tmp_0;\r\n  int8_T tmp_1;\r\n  rtb_IProdOut = PID_mat_U.Tar - PID_mat_U.Now;\r\n  rtb_Sum = rtb_IProdOut * PID_mat_U.Kp + PID_mat_DW.Integrator_DSTATE;\r\n  if (rtb_Sum > PID_mat_U.OUTMAX) {\r\n    PID_mat_Y.Current = PID_mat_U.OUTMAX;\r\n  } else if (rtb_Sum < PID_mat_U.OUTLOW) {\r\n    PID_mat_Y.Current = PID_mat_U.OUTLOW;\r\n  } else {\r\n    PID_mat_Y.Current = rtb_Sum;\r\n  }\r\n\r\n  if (rtb_Sum >= PID_mat_U.OUTMAX) {\r\n    tmp = PID_mat_U.OUTMAX;\r\n  } else if (rtb_Sum > PID_mat_U.OUTLOW) {\r\n    tmp = rtb_Sum;\r\n  } else {\r\n    tmp = PID_mat_U.OUTLOW;\r\n  }\r\n\r\n  rtb_Sum -= tmp;\r\n  rtb_IProdOut *= PID_mat_U.Ki;\r\n  if (rtb_Sum > 0.0) {\r\n    tmp_0 = 1;\r\n  } else {\r\n    tmp_0 = -1;\r\n  }\r\n\r\n  if (rtb_IProdOut > 0.0) {\r\n    tmp_1 = 1;\r\n  } else {\r\n    tmp_1 = -1;\r\n  }\r\n\r\n  if ((rtb_Sum != 0.0) && (tmp_0 == tmp_1)) {\r\n    rtb_IProdOut = 0.0;\r\n  }\r\n\r\n  PID_mat_DW.Integrator_DSTATE += 0.001 * rtb_IProdOut;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid PID_mat_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] PID_mat.c\r\n */\r\n"},{"name":"PID_mat.h","type":"header","group":"model","path":"E:\\competition\\2024_ROBOMASTER\\A_JINZ\\framework\\system_detect\\PID_mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: PID_mat.h\r\n *\r\n * Code generated for Simulink model :PID_mat.\r\n *\r\n * Model version      : 1.1\r\n * Simulink Coder version    : 23.2 (R2023b) 01-Aug-2023\r\n * TLC version       : 23.2 (Nov 08 2023)\r\n * C/C++ source code generated on  : Wed Nov  8 15:52:54 2023\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_PID_mat_h_\r\n#define RTW_HEADER_PID_mat_h_\r\n#ifndef PID_mat_COMMON_INCLUDES_\r\n#define PID_mat_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* PID_mat_COMMON_INCLUDES_ */\r\n\r\n#include \"PID_mat_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Integrator_DSTATE;            /* '<S36>/Integrator' */\r\n} DW_PID_mat;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T OUTMAX;                       /* '<Root>/OUTMAX' */\r\n  real_T OUTLOW;                       /* '<Root>/OUTLOW' */\r\n  real_T Ki;                           /* '<Root>/Ki' */\r\n  real_T Kp;                           /* '<Root>/Kp' */\r\n  real_T Tar;                          /* '<Root>/Tar' */\r\n  real_T Now;                          /* '<Root>/Now' */\r\n} ExtU_PID_mat;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T Current;                      /* '<Root>/Current' */\r\n} ExtY_PID_mat;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_PID_mat {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block states (default storage) */\r\nextern DW_PID_mat PID_mat_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_PID_mat PID_mat_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_PID_mat PID_mat_Y;\r\n\r\n/* Model entry point functions */\r\nextern void PID_mat_initialize(void);\r\nextern void PID_mat_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_PID_mat *const PID_mat_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S44>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S44>/Data Type Propagation' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'PID_mat'\r\n * '<S1>'   : 'PID_mat/PID Controller'\r\n * '<S2>'   : 'PID_mat/PID Controller/Anti-windup'\r\n * '<S3>'   : 'PID_mat/PID Controller/D Gain'\r\n * '<S4>'   : 'PID_mat/PID Controller/Filter'\r\n * '<S5>'   : 'PID_mat/PID Controller/Filter ICs'\r\n * '<S6>'   : 'PID_mat/PID Controller/I Gain'\r\n * '<S7>'   : 'PID_mat/PID Controller/Ideal P Gain'\r\n * '<S8>'   : 'PID_mat/PID Controller/Ideal P Gain Fdbk'\r\n * '<S9>'   : 'PID_mat/PID Controller/Integrator'\r\n * '<S10>'  : 'PID_mat/PID Controller/Integrator ICs'\r\n * '<S11>'  : 'PID_mat/PID Controller/N Copy'\r\n * '<S12>'  : 'PID_mat/PID Controller/N Gain'\r\n * '<S13>'  : 'PID_mat/PID Controller/P Copy'\r\n * '<S14>'  : 'PID_mat/PID Controller/Parallel P Gain'\r\n * '<S15>'  : 'PID_mat/PID Controller/Reset Signal'\r\n * '<S16>'  : 'PID_mat/PID Controller/Saturation'\r\n * '<S17>'  : 'PID_mat/PID Controller/Saturation Fdbk'\r\n * '<S18>'  : 'PID_mat/PID Controller/Sum'\r\n * '<S19>'  : 'PID_mat/PID Controller/Sum Fdbk'\r\n * '<S20>'  : 'PID_mat/PID Controller/Tracking Mode'\r\n * '<S21>'  : 'PID_mat/PID Controller/Tracking Mode Sum'\r\n * '<S22>'  : 'PID_mat/PID Controller/Tsamp - Integral'\r\n * '<S23>'  : 'PID_mat/PID Controller/Tsamp - Ngain'\r\n * '<S24>'  : 'PID_mat/PID Controller/postSat Signal'\r\n * '<S25>'  : 'PID_mat/PID Controller/preSat Signal'\r\n * '<S26>'  : 'PID_mat/PID Controller/Anti-windup/Disc. Clamping Parallel'\r\n * '<S27>'  : 'PID_mat/PID Controller/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S28>'  : 'PID_mat/PID Controller/Anti-windup/Disc. Clamping Parallel/Dead Zone/External'\r\n * '<S29>'  : 'PID_mat/PID Controller/Anti-windup/Disc. Clamping Parallel/Dead Zone/External/Dead Zone Dynamic'\r\n * '<S30>'  : 'PID_mat/PID Controller/D Gain/Disabled'\r\n * '<S31>'  : 'PID_mat/PID Controller/Filter/Disabled'\r\n * '<S32>'  : 'PID_mat/PID Controller/Filter ICs/Disabled'\r\n * '<S33>'  : 'PID_mat/PID Controller/I Gain/External Parameters'\r\n * '<S34>'  : 'PID_mat/PID Controller/Ideal P Gain/Passthrough'\r\n * '<S35>'  : 'PID_mat/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S36>'  : 'PID_mat/PID Controller/Integrator/Discrete'\r\n * '<S37>'  : 'PID_mat/PID Controller/Integrator ICs/Internal IC'\r\n * '<S38>'  : 'PID_mat/PID Controller/N Copy/Disabled wSignal Specification'\r\n * '<S39>'  : 'PID_mat/PID Controller/N Gain/Disabled'\r\n * '<S40>'  : 'PID_mat/PID Controller/P Copy/Disabled'\r\n * '<S41>'  : 'PID_mat/PID Controller/Parallel P Gain/External Parameters'\r\n * '<S42>'  : 'PID_mat/PID Controller/Reset Signal/Disabled'\r\n * '<S43>'  : 'PID_mat/PID Controller/Saturation/External'\r\n * '<S44>'  : 'PID_mat/PID Controller/Saturation/External/Saturation Dynamic'\r\n * '<S45>'  : 'PID_mat/PID Controller/Saturation Fdbk/Disabled'\r\n * '<S46>'  : 'PID_mat/PID Controller/Sum/Sum_PI'\r\n * '<S47>'  : 'PID_mat/PID Controller/Sum Fdbk/Disabled'\r\n * '<S48>'  : 'PID_mat/PID Controller/Tracking Mode/Disabled'\r\n * '<S49>'  : 'PID_mat/PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S50>'  : 'PID_mat/PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n * '<S51>'  : 'PID_mat/PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S52>'  : 'PID_mat/PID Controller/postSat Signal/Forward_Path'\r\n * '<S53>'  : 'PID_mat/PID Controller/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* RTW_HEADER_PID_mat_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] PID_mat.h\r\n */\r\n"},{"name":"PID_mat_private.h","type":"header","group":"model","path":"E:\\competition\\2024_ROBOMASTER\\A_JINZ\\framework\\system_detect\\PID_mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: PID_mat_private.h\r\n *\r\n * Code generated for Simulink model :PID_mat.\r\n *\r\n * Model version      : 1.1\r\n * Simulink Coder version    : 23.2 (R2023b) 01-Aug-2023\r\n * TLC version       : 23.2 (Nov 08 2023)\r\n * C/C++ source code generated on  : Wed Nov  8 15:52:54 2023\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_PID_mat_private_h_\r\n#define RTW_HEADER_PID_mat_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"PID_mat_types.h\"\r\n#endif                                 /* RTW_HEADER_PID_mat_private_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] PID_mat_private.h\r\n */\r\n"},{"name":"PID_mat_types.h","type":"header","group":"model","path":"E:\\competition\\2024_ROBOMASTER\\A_JINZ\\framework\\system_detect\\PID_mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: PID_mat_types.h\r\n *\r\n * Code generated for Simulink model :PID_mat.\r\n *\r\n * Model version      : 1.1\r\n * Simulink Coder version    : 23.2 (R2023b) 01-Aug-2023\r\n * TLC version       : 23.2 (Nov 08 2023)\r\n * C/C++ source code generated on  : Wed Nov  8 15:52:54 2023\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_PID_mat_types_h_\r\n#define RTW_HEADER_PID_mat_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_PID_mat RT_MODEL_PID_mat;\r\n\r\n#endif                                 /* RTW_HEADER_PID_mat_types_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] PID_mat_types.h\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"E:\\competition\\2024_ROBOMASTER\\A_JINZ\\framework\\system_detect\\PID_mat_stm32","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model :PID_mat.\r\n *\r\n * Model version      : 1.1\r\n * Simulink Coder version    : 23.2 (R2023b) 01-Aug-2023\r\n * TLC version       : 23.2 (Nov 08 2023)\r\n * C/C++ source code generated on  : Wed Nov  8 15:52:54 2023\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] rtwtypes.h\r\n */\r\n"},{"name":"main.c","type":"source","group":"","path":"E:\\competition\\2024_ROBOMASTER\\A_JINZ\\framework\\system_detect\\PID_mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: main.c\r\n *\r\n * Code generated for Simulink model :PID_mat.\r\n *\r\n * Model version      : 1.1\r\n * Simulink Coder version    : 23.2 (R2023b) 01-Aug-2023\r\n * TLC version       : 23.2 (Nov 08 2023)\r\n * C/C++ source code generated on  : Wed Nov  8 15:52:54 2023\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n/* This section of code is going to be merged by the STM32CubeMX tool. */\r\n/* USER CODE BEGIN 0 */\r\n#include <stdio.h>\r\n#include \"PID_mat.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Flags for taskOverrun */\r\nstatic boolean_T OverrunFlags[1] = { false, };\r\n\r\n/* Number of auto reload timer rotation computed */\r\nstatic volatile uint32_t autoReloadTimerLoopVal_S = 1;\r\n\r\n/* Remaining number of auto reload timer rotation to do */\r\nvolatile uint32_t remainAutoReloadTimerLoopVal_S = 1;\r\n\r\n/* USER CODE END 0 */\r\n\r\n/**\r\n * @brief  The application entry point.\r\n * @retval int\r\n */\r\nint main (void)\r\n{\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN 1 */\r\n  /* USER CODE END 1 */\r\n\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN 2 */\r\n  /* Use Systick arm timer and interrupt to tick step() functions of the Simulink model. */\r\n  /* Fundamental sample time is set to: '0.001000000' s */\r\n  if (SysTick_Config((uint32_t)(SystemCoreClock/1000.0))) {\r\n    autoReloadTimerLoopVal_S = 1;\r\n    do {\r\n      autoReloadTimerLoopVal_S++;\r\n    } while ((uint32_t)(SystemCoreClock/1000.0)/autoReloadTimerLoopVal_S >\r\n             SysTick_LOAD_RELOAD_Msk);\r\n\r\n    SysTick_Config((uint32_t)(SystemCoreClock/1000.0)/autoReloadTimerLoopVal_S);\r\n  }\r\n\r\n  /* Set number of loop to do. */\r\n  remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;\r\n\r\n  {\r\n    int i;\r\n    for (i = 0; i < 1; i++) {\r\n      OverrunFlags[i] = false;\r\n    }\r\n  }\r\n\r\n  /* Initialize model */\r\n  PID_mat_initialize();\r\n\r\n  /* USER CODE END 2 */\r\n\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN WHILE */\r\n  /* Infinite loop */\r\n  /* Real time from systickHandler */\r\n  while (1) {\r\n    /*Process tasks every solver time*/\r\n    if (remainAutoReloadTimerLoopVal_S == 0) {\r\n      remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;\r\n\r\n      /* Check base rate for overrun */\r\n      if (OverrunFlags[0]) {\r\n        rtmSetErrorStatus(PID_mat_M, \"Overrun\");\r\n      }\r\n\r\n      OverrunFlags[0] = true;\r\n\r\n      /* Step the model for base rate */\r\n      PID_mat_step();\r\n\r\n      /* Get model outputs here */\r\n\r\n      /* Indicate task for base rate complete */\r\n      OverrunFlags[0] = false;\r\n    }\r\n  }\r\n\r\n  /* USER CODE END WHILE */\r\n\r\n  /* USER CODE BEGIN 3 */\r\n  /* USER CODE END 3 */\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] main.c\r\n */\r\n"},{"name":"stm32xxxx_it.c","type":"source","group":"","path":"E:\\competition\\2024_ROBOMASTER\\A_JINZ\\framework\\system_detect\\PID_mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: stm32xxxx_it.c\r\n *\r\n * Code generated for Simulink model :PID_mat.\r\n *\r\n * Model version      : 1.1\r\n * Simulink Coder version    : 23.2 (R2023b) 01-Aug-2023\r\n * TLC version       : 23.2 (Nov 08 2023)\r\n * C/C++ source code generated on  : Wed Nov  8 15:52:54 2023\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n/**\r\n * @brief This function handles System tick timer.\r\n */\r\nvoid SysTick_Handler(void)\r\n{\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN SysTick_IRQn 0 */\r\n  {\r\n    extern volatile uint32_t remainAutoReloadTimerLoopVal_S;\r\n\r\n    /* Manage number of loop before interrupt has to be processed. */\r\n    if (remainAutoReloadTimerLoopVal_S) {\r\n      remainAutoReloadTimerLoopVal_S--;\r\n    }\r\n  }\r\n\r\n  /* USER CODE END SysTick_IRQn 0 */\r\n\r\n  /* USER CODE BEGIN SysTick_IRQn 1 */\r\n\r\n  /* USER CODE END SysTick_IRQn 1 */\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] stm32xxxx_it.c\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};